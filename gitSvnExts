#!/usr/bin/env perl

=for pod
gitSvnExts - Utility to create git repos for MediaWiki extensions.

=head1 SYNOPSIS

gitSvnExts [options] [extensionName...]

=head2 DESCRIPTION
This should be executed from the command line at the directory usually called $IP, i.e.,
the one containing your MediaWiki LocalSettings.php.

=head2 OPTIONS

=over 8

=cut

use strict;
use warnings qw/all/;

use Cwd qw/getcwd/;
use Getopt::Long qw/GetOptions/;
use File::Path qw/rmtree/;
use Pod::Usage qw/pod2usage/;

# configuration

# all else should be good below, if you have a typical layout
debugSetup();

=item B<--help>

Print a help message and exit.
=cut
my $help = 0;

=item B<--minrev>

Fetching every single revision is sometimes impractical. So, this is the minimum revision to fetch. Defaults to 50000.
=cut
my $minRev = 50000;

=item B<--user>

Your username at the SVN server. Defaults to local username.
=cut
my $user = $ENV{"USER"};

=item B<--extdir>

Where to put the extensions. Defaults to 'extensions' in the current working directory.
=cut
my $ipDir = getcwd();
my $extDir = "$ipDir/extensions";

=item B<--baseurl>

The base SVN url to fetch extensions from.
=cut
my $baseUrl = "svn+ssh://$user\@svn.wikimedia.org/svnroot/mediawiki/trunk/extensions";

=item B<--replace>

If present, will delete an existing directory in favor of the new repository.
=cut
my $replace = 0;

=for pod
=back
=cut

my $result = GetOptions( 
  "user=s" => \$user,
  "extdir=s" => \$extDir,
  "baseurl=s" => \$baseUrl,
  "minrev=i" => \$minRev,
  "replace" => \$replace,
  "help|?" => \$help,
);

if ( $help or !@ARGV ) {
  pod2usage(1);
  exit;
}

makeExtRepos( \@ARGV, $baseUrl, $extDir, $minRev );

# the end


sub makeExtRepos {
  my ( $exts, $baseUrl, $extDir, $minRev, $replace ) = @_;
 
  if ( ! -d $extDir ) {
    mkdir $extDir or die $!;
  }

  my %ext = getExtensionsEarliestRevision( $exts, $baseUrl );

  while ( my ( $ext, $props ) = each %ext ) {
    debug( ">> make git repo for $ext" );
    makeGitRepo( $extDir, $ext, $props, $minRev, $replace );
  }

}

sub getExtensionsEarliestRevision {
  my ($exts, $baseUrl) = @_;
  my %extRev = ();
  foreach my $ext ( @$exts ) {
    my $extUrl = "$baseUrl/$ext";
    my $rev = getEarliestRev( $extUrl );
    if ( ! defined $rev ) {
      warn "couldn't find earliest revision for $ext";
    } else {
      $extRev{$ext} = { rev => $rev, url => $extUrl };
    }
  }
  return %extRev;
}

sub getEarliestRev {
  my ( $extUrl ) = @_;
  debug( ">> get earliest rev for $extUrl" );
  open my $fh, "-|", "svn log $extUrl" or die "can't get log for $extUrl -- $!";
  my $rev = undef;
  my $debugTick = getDebugTicker(10);
  while (<$fh>) {
    /^r(\d+)/ and $rev = $1;
    $debugTick->();
  }
  debug("rev = $rev");
  close $fh or die $!;
  return $rev;
}

sub makeGitRepo {
  my ($extDir, $ext, $props, $minRev, $replace) = @_;

  my $repoDir = "$extDir/$ext";
  if (-e $repoDir) {
    if ($replace) { 
      rmtree($repoDir); 
    } else {
      warn "$repoDir exists already. Skipping. Use --replace to replace it\n";
      return;
    }
  }

  my $url = $props->{'url'};
  my $rev = $props->{'rev'};
  chdir $extDir or die $!;
  $rev = int($rev);
  if ( $rev < $minRev ) {
    $rev = $minRev;
  }
  sys( "git svn clone -r $rev:HEAD $url" );
  chdir "$extDir/$ext" or die $!;
  sys( "git svn rebase " );
}

sub debugSetup {
  if ($ENV{'DEBUG'} ) {
    my $old_fh = select(STDERR);
    $| = 1;
    select($old_fh);
  }
}

sub debug {
  if ( $ENV{'DEBUG'} ) {
    warn( $_[0] . "\n" );
  }
}

sub getDebugTicker {
  my ($count) = @_;
  my $iter = 0;
  return sub {
    if ( $iter++ % $count == 0 && $ENV{'DEBUG'} ) {
      print STDERR ".";
    }
  }
}


sub sys {
  my ($cmd) = @_;
  warn "$cmd...\n";
  system( $cmd ) and die $!;
}


